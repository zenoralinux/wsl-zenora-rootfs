name: Build Zenora WSL Distribution

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      CONFIGURATION: Release
      LAUNCHER_DIR: DistroLauncher
      DISTRO_NAME: Zenora
      TAR_FILE: zenora.tar.gz

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        choco install visualstudio2022buildtools visualstudio2022-workload-vctools windows-sdk-10 -y

    - name: Download rootfs
      run: |
        curl -L -o rootfs.tar.gz https://github.com/zenora-os/rootfs/releases/latest/download/rootfs.tar.gz

    - name: Extract rootfs
      run: |
        mkdir -p rootfs
        tar -xzf rootfs.tar.gz -C rootfs

    - name: Patch appx manifest
      run: |
        $manifest = "${{ env.LAUNCHER_DIR }}\DistroLauncher-Appx\ZenoraWSL.appxmanifest"
        (Get-Content $manifest) -replace "YourAppName", "${{ env.DISTRO_NAME }}" |
        Set-Content $manifest

    - name: Patch certificate path in vcxproj (safe xml edit)
      shell: pwsh
      run: |
        $vcxprojPath = "${{ env.LAUNCHER_DIR }}\DistroLauncher-Appx\DistroLauncher-Appx.vcxproj"
        [xml]$xml = Get-Content $vcxprojPath

        $nodesToRemove = $xml.Project.PropertyGroup.PackageCertificateThumbprint
        if ($nodesToRemove) {
            foreach ($node in $nodesToRemove) {
                $node.ParentNode.RemoveChild($node) | Out-Null
            }
        }

        $propertyGroup = $xml.Project.PropertyGroup | Where-Object { $_.PackageCertificateKeyFile -eq $null } | Select-Object -First 1
        if (-not $propertyGroup) {
            $propertyGroup = $xml.Project.PropertyGroup[0]
        }

        if ($propertyGroup.PackageCertificateKeyFile) {
            $propertyGroup.PackageCertificateKeyFile = "ZenoraWSL.pfx"
        } else {
            $newNode = $xml.CreateElement("PackageCertificateKeyFile")
            $newNode.InnerText = "ZenoraWSL.pfx"
            $propertyGroup.AppendChild($newNode) | Out-Null
        }

        $xml.Save($vcxprojPath)

    - name: Create self-signed certificate
      shell: pwsh
      run: |
        $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=ZenoraWSL" -CertStoreLocation "Cert:\CurrentUser\My"
        $pwd = ConvertTo-SecureString -String "1234" -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath ZenoraWSL.pfx -Password $pwd

    - name: Build DistroLauncher
      run: |
        msbuild $env:LAUNCHER_DIR\DistroLauncher.sln /p:Configuration=$env:CONFIGURATION /p:Platform=x64

    - name: Generate appx package
      run: |
        cd $env:LAUNCHER_DIR
        MakeAppx.exe pack /d "Appx" /p "${{ env.DISTRO_NAME }}.appx"
        SignTool.exe sign /fd SHA256 /a /f "..\ZenoraWSL.pfx" /p 1234 "${{ env.DISTRO_NAME }}.appx"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Zenora-WSL-Package
        path: |
          ${{ env.LAUNCHER_DIR }}\${{ env.DISTRO_NAME }}.appx
          rootfs.tar.gz

